'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CarCaptain Autospares")>  _
Partial Public Class dbTablesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  Partial Private Sub InsertProduct(instance As Product)
    End Sub
  Partial Private Sub UpdateProduct(instance As Product)
    End Sub
  Partial Private Sub DeleteProduct(instance As Product)
    End Sub
  Partial Private Sub InsertInvoice(instance As Invoice)
    End Sub
  Partial Private Sub UpdateInvoice(instance As Invoice)
    End Sub
  Partial Private Sub DeleteInvoice(instance As Invoice)
    End Sub
  Partial Private Sub InsertInvoiceProduct(instance As InvoiceProduct)
    End Sub
  Partial Private Sub UpdateInvoiceProduct(instance As InvoiceProduct)
    End Sub
  Partial Private Sub DeleteInvoiceProduct(instance As InvoiceProduct)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("CarCaptain_AutosparesConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
		Get
			Return Me.GetTable(Of Product)
		End Get
	End Property
	
	Public ReadOnly Property Invoices() As System.Data.Linq.Table(Of Invoice)
		Get
			Return Me.GetTable(Of Invoice)
		End Get
	End Property
	
	Public ReadOnly Property InvoiceProducts() As System.Data.Linq.Table(Of InvoiceProduct)
		Get
			Return Me.GetTable(Of InvoiceProduct)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[User]")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As Integer
	
	Private _FName As String
	
	Private _Surname As String
	
	Private _Username As String
	
	Private _Email As String
	
	Private _Password As String
	
	Private _Invoice As System.Nullable(Of Decimal)
	
	Private _Level As System.Nullable(Of Integer)
	
	Private _Products As EntitySet(Of Product)
	
	Private _Invoices As EntitySet(Of Invoice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnFNameChanging(value As String)
    End Sub
    Partial Private Sub OnFNameChanged()
    End Sub
    Partial Private Sub OnSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnSurnameChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnInvoiceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnInvoiceChanged()
    End Sub
    Partial Private Sub OnLevelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLevelChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		Me._Invoices = New EntitySet(Of Invoice)(AddressOf Me.attach_Invoices, AddressOf Me.detach_Invoices)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserId() As Integer
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FName() As String
		Get
			Return Me._FName
		End Get
		Set
			If (String.Equals(Me._FName, value) = false) Then
				Me.OnFNameChanging(value)
				Me.SendPropertyChanging
				Me._FName = value
				Me.SendPropertyChanged("FName")
				Me.OnFNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Surname", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Surname() As String
		Get
			Return Me._Surname
		End Get
		Set
			If (String.Equals(Me._Surname, value) = false) Then
				Me.OnSurnameChanging(value)
				Me.SendPropertyChanging
				Me._Surname = value
				Me.SendPropertyChanged("Surname")
				Me.OnSurnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Invoice", DbType:="Money")>  _
	Public Property Invoice() As System.Nullable(Of Decimal)
		Get
			Return Me._Invoice
		End Get
		Set
			If (Me._Invoice.Equals(value) = false) Then
				Me.OnInvoiceChanging(value)
				Me.SendPropertyChanging
				Me._Invoice = value
				Me.SendPropertyChanged("Invoice")
				Me.OnInvoiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Level]", Storage:="_Level", DbType:="Int")>  _
	Public Property Level() As System.Nullable(Of Integer)
		Get
			Return Me._Level
		End Get
		Set
			If (Me._Level.Equals(value) = false) Then
				Me.OnLevelChanging(value)
				Me.SendPropertyChanging
				Me._Level = value
				Me.SendPropertyChanged("Level")
				Me.OnLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Product", Storage:="_Products", ThisKey:="UserId", OtherKey:="User_ID")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Invoice", Storage:="_Invoices", ThisKey:="UserId", OtherKey:="UserId")>  _
	Public Property Invoices() As EntitySet(Of Invoice)
		Get
			Return Me._Invoices
		End Get
		Set
			Me._Invoices.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.User = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.User = Nothing
	End Sub
	
	Private Sub attach_Invoices(ByVal entity As Invoice)
		Me.SendPropertyChanging
		entity.User = Me
	End Sub
	
	Private Sub detach_Invoices(ByVal entity As Invoice)
		Me.SendPropertyChanging
		entity.User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Product")>  _
Partial Public Class Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _P_Id As Integer
	
	Private _Name As String
	
	Private _Quantity As System.Nullable(Of Integer)
	
	Private _Price As Decimal
	
	Private _ShortDescription As String
	
	Private _LongDescription As String
	
	Private _ImgLocation As String
	
	Private _User_ID As Integer
	
	Private _InvoiceProducts As EntitySet(Of InvoiceProduct)
	
	Private _User As EntityRef(Of User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnP_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnP_IdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnShortDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnShortDescriptionChanged()
    End Sub
    Partial Private Sub OnLongDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnLongDescriptionChanged()
    End Sub
    Partial Private Sub OnImgLocationChanging(value As String)
    End Sub
    Partial Private Sub OnImgLocationChanged()
    End Sub
    Partial Private Sub OnUser_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUser_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._InvoiceProducts = New EntitySet(Of InvoiceProduct)(AddressOf Me.attach_InvoiceProducts, AddressOf Me.detach_InvoiceProducts)
		Me._User = CType(Nothing, EntityRef(Of User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_P_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property P_Id() As Integer
		Get
			Return Me._P_Id
		End Get
		Set
			If ((Me._P_Id = value)  _
						= false) Then
				Me.OnP_IdChanging(value)
				Me.SendPropertyChanging
				Me._P_Id = value
				Me.SendPropertyChanged("P_Id")
				Me.OnP_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int")>  _
	Public Property Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Price() As Decimal
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShortDescription", DbType:="VarChar(MAX)")>  _
	Public Property ShortDescription() As String
		Get
			Return Me._ShortDescription
		End Get
		Set
			If (String.Equals(Me._ShortDescription, value) = false) Then
				Me.OnShortDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ShortDescription = value
				Me.SendPropertyChanged("ShortDescription")
				Me.OnShortDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LongDescription", DbType:="VarChar(MAX)")>  _
	Public Property LongDescription() As String
		Get
			Return Me._LongDescription
		End Get
		Set
			If (String.Equals(Me._LongDescription, value) = false) Then
				Me.OnLongDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._LongDescription = value
				Me.SendPropertyChanged("LongDescription")
				Me.OnLongDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgLocation", DbType:="VarChar(50)")>  _
	Public Property ImgLocation() As String
		Get
			Return Me._ImgLocation
		End Get
		Set
			If (String.Equals(Me._ImgLocation, value) = false) Then
				Me.OnImgLocationChanging(value)
				Me.SendPropertyChanging
				Me._ImgLocation = value
				Me.SendPropertyChanged("ImgLocation")
				Me.OnImgLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_ID", DbType:="Int NOT NULL")>  _
	Public Property User_ID() As Integer
		Get
			Return Me._User_ID
		End Get
		Set
			If ((Me._User_ID = value)  _
						= false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUser_IDChanging(value)
				Me.SendPropertyChanging
				Me._User_ID = value
				Me.SendPropertyChanged("User_ID")
				Me.OnUser_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_InvoiceProduct", Storage:="_InvoiceProducts", ThisKey:="P_Id", OtherKey:="P_Id")>  _
	Public Property InvoiceProducts() As EntitySet(Of InvoiceProduct)
		Get
			Return Me._InvoiceProducts
		End Get
		Set
			Me._InvoiceProducts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Product", Storage:="_User", ThisKey:="User_ID", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._User_ID = value.UserId
				Else
					Me._User_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_InvoiceProducts(ByVal entity As InvoiceProduct)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_InvoiceProducts(ByVal entity As InvoiceProduct)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Invoice")>  _
Partial Public Class Invoice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Invoice_ID As Integer
	
	Private _InvoiceReference As String
	
	Private _InvoiceDate As System.Nullable(Of Date)
	
	Private _UserId As System.Nullable(Of Integer)
	
	Private _BuyingPrice As System.Nullable(Of Decimal)
	
	Private _InvoiceProducts As EntitySet(Of InvoiceProduct)
	
	Private _User As EntityRef(Of User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnInvoice_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnInvoice_IDChanged()
    End Sub
    Partial Private Sub OnInvoiceReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnInvoiceReferenceChanged()
    End Sub
    Partial Private Sub OnInvoiceDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnInvoiceDateChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnBuyingPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBuyingPriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._InvoiceProducts = New EntitySet(Of InvoiceProduct)(AddressOf Me.attach_InvoiceProducts, AddressOf Me.detach_InvoiceProducts)
		Me._User = CType(Nothing, EntityRef(Of User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Invoice_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Invoice_ID() As Integer
		Get
			Return Me._Invoice_ID
		End Get
		Set
			If ((Me._Invoice_ID = value)  _
						= false) Then
				Me.OnInvoice_IDChanging(value)
				Me.SendPropertyChanging
				Me._Invoice_ID = value
				Me.SendPropertyChanged("Invoice_ID")
				Me.OnInvoice_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceReference", DbType:="VarChar(50)")>  _
	Public Property InvoiceReference() As String
		Get
			Return Me._InvoiceReference
		End Get
		Set
			If (String.Equals(Me._InvoiceReference, value) = false) Then
				Me.OnInvoiceReferenceChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceReference = value
				Me.SendPropertyChanged("InvoiceReference")
				Me.OnInvoiceReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceDate", DbType:="DateTime")>  _
	Public Property InvoiceDate() As System.Nullable(Of Date)
		Get
			Return Me._InvoiceDate
		End Get
		Set
			If (Me._InvoiceDate.Equals(value) = false) Then
				Me.OnInvoiceDateChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceDate = value
				Me.SendPropertyChanged("InvoiceDate")
				Me.OnInvoiceDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int")>  _
	Public Property UserId() As System.Nullable(Of Integer)
		Get
			Return Me._UserId
		End Get
		Set
			If (Me._UserId.Equals(value) = false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuyingPrice", DbType:="Decimal(18,2)")>  _
	Public Property BuyingPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._BuyingPrice
		End Get
		Set
			If (Me._BuyingPrice.Equals(value) = false) Then
				Me.OnBuyingPriceChanging(value)
				Me.SendPropertyChanging
				Me._BuyingPrice = value
				Me.SendPropertyChanged("BuyingPrice")
				Me.OnBuyingPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Invoice_InvoiceProduct", Storage:="_InvoiceProducts", ThisKey:="Invoice_ID", OtherKey:="Invoice_ID")>  _
	Public Property InvoiceProducts() As EntitySet(Of InvoiceProduct)
		Get
			Return Me._InvoiceProducts
		End Get
		Set
			Me._InvoiceProducts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Invoice", Storage:="_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.Invoices.Remove(Me)
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Invoices.Add(Me)
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_InvoiceProducts(ByVal entity As InvoiceProduct)
		Me.SendPropertyChanging
		entity.Invoice = Me
	End Sub
	
	Private Sub detach_InvoiceProducts(ByVal entity As InvoiceProduct)
		Me.SendPropertyChanging
		entity.Invoice = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.InvoiceProduct")>  _
Partial Public Class InvoiceProduct
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _InvoiceProductID As Integer
	
	Private _Invoice_ID As System.Nullable(Of Integer)
	
	Private _Quantity As System.Nullable(Of Integer)
	
	Private _P_Id As System.Nullable(Of Integer)
	
	Private _ProductQuantity As System.Nullable(Of Integer)
	
	Private _BuyingPrice As System.Nullable(Of Decimal)
	
	Private _Invoice As EntityRef(Of Invoice)
	
	Private _Product As EntityRef(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnInvoiceProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnInvoiceProductIDChanged()
    End Sub
    Partial Private Sub OnInvoice_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoice_IDChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnP_IdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnP_IdChanged()
    End Sub
    Partial Private Sub OnProductQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductQuantityChanged()
    End Sub
    Partial Private Sub OnBuyingPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBuyingPriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Invoice = CType(Nothing, EntityRef(Of Invoice))
		Me._Product = CType(Nothing, EntityRef(Of Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property InvoiceProductID() As Integer
		Get
			Return Me._InvoiceProductID
		End Get
		Set
			If ((Me._InvoiceProductID = value)  _
						= false) Then
				Me.OnInvoiceProductIDChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceProductID = value
				Me.SendPropertyChanged("InvoiceProductID")
				Me.OnInvoiceProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Invoice_ID", DbType:="Int")>  _
	Public Property Invoice_ID() As System.Nullable(Of Integer)
		Get
			Return Me._Invoice_ID
		End Get
		Set
			If (Me._Invoice_ID.Equals(value) = false) Then
				If Me._Invoice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnInvoice_IDChanging(value)
				Me.SendPropertyChanging
				Me._Invoice_ID = value
				Me.SendPropertyChanged("Invoice_ID")
				Me.OnInvoice_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int")>  _
	Public Property Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_P_Id", DbType:="Int")>  _
	Public Property P_Id() As System.Nullable(Of Integer)
		Get
			Return Me._P_Id
		End Get
		Set
			If (Me._P_Id.Equals(value) = false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnP_IdChanging(value)
				Me.SendPropertyChanging
				Me._P_Id = value
				Me.SendPropertyChanged("P_Id")
				Me.OnP_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductQuantity", DbType:="Int")>  _
	Public Property ProductQuantity() As System.Nullable(Of Integer)
		Get
			Return Me._ProductQuantity
		End Get
		Set
			If (Me._ProductQuantity.Equals(value) = false) Then
				Me.OnProductQuantityChanging(value)
				Me.SendPropertyChanging
				Me._ProductQuantity = value
				Me.SendPropertyChanged("ProductQuantity")
				Me.OnProductQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuyingPrice", DbType:="Decimal(18,2)")>  _
	Public Property BuyingPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._BuyingPrice
		End Get
		Set
			If (Me._BuyingPrice.Equals(value) = false) Then
				Me.OnBuyingPriceChanging(value)
				Me.SendPropertyChanging
				Me._BuyingPrice = value
				Me.SendPropertyChanged("BuyingPrice")
				Me.OnBuyingPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Invoice_InvoiceProduct", Storage:="_Invoice", ThisKey:="Invoice_ID", OtherKey:="Invoice_ID", IsForeignKey:=true)>  _
	Public Property Invoice() As Invoice
		Get
			Return Me._Invoice.Entity
		End Get
		Set
			Dim previousValue As Invoice = Me._Invoice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Invoice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Invoice.Entity = Nothing
					previousValue.InvoiceProducts.Remove(Me)
				End If
				Me._Invoice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.InvoiceProducts.Add(Me)
					Me._Invoice_ID = value.Invoice_ID
				Else
					Me._Invoice_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Invoice")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_InvoiceProduct", Storage:="_Product", ThisKey:="P_Id", OtherKey:="P_Id", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.InvoiceProducts.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.InvoiceProducts.Add(Me)
					Me._P_Id = value.P_Id
				Else
					Me._P_Id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
